install.packages("seasonalview")
install.packages("forecast")
install.packages("ggplot2")
install.packages("urca")
install.packages("lmtest")
install.packages("seasonal")
myts
myts - rnorma(60)
myts
myts = rnorm(60)
myts
myts = ts(myts, start = c(2012,1), and c=(2016,12), frequency = 12)
myts = ts(myts, start = c(2012,1), and = c(2016,12), frequency = 12)
myts = ts(myts, start = c(2012,1), and = c(2016,12), frequency = 12)
myts
class(myts)
myts = ts(myts, start = c(2012,1), end = c(2016,12), frequency = 12)
myts
class(myts)
plot(myts)
tempts = reade.csv(file.choose(), sep ",", header = f)
print tempts
tempts = read.csv(file.choose(), sep ",", header = f)
tempts = read.csv(file.choose(), sep=",", header = f)
print(temps)
print(tempts)
tempts = read.csv(file.choose(), sep=",", header = f)
print(tempts)
tempts = read.csv(file.choose(),sep=",", header = F)
print(tempts)
class(tempts)
# Gerando o Gráfico
plot(tempts)
# Neste exemplo não usaremos o V1, transformando em Serie Temporal
tempts = ts(tempts[2],start = c(1884), end = c(1939), frequency = 1)
class(tempts)
# Gerando o Gráfico
plot(tempts)
print(sunspots)
class(sun)
class(sunspots)
help("sunspots")
# Verificando o tamanho máximo
max(sunspots)
# verificando o tamanho minimo
min(sunspots)
# verificando a média
mean(sunspots)
# verificando a mediana
median(sunspots)
# verficando um resumo de várias estatísticas com summary
summary(sunspots)
# Verificando quantas observações existem na serie temporal
length(sunspots)
# Verificando a data inicial da serie temportal
start(sunspots)
# Verificando a data final
end(sunspots)
print(sun2)
print(sun2)
sun2 = window(sunspots, start=c(1749,1), end=c(1763,12))
print(sun2)
plot(sunspots)
hist(sunspots)
boxplot(sunspots)
# O pacote forecast é importante para a execução do ggplot 2
library(ggplot2)
library(forecast)
# Chamando a função autoplot que pertence ao pacote ggplot2 para manipular a serie temporal
# Neste exemplo abaixo utilizaremos a serie temporal AirPassengers
autoplot(AirPassengers)
# Gerando uma serie sub-temporal usando o window
sun2 = window(sunspots, start=c(1749,1), end=c(1763,12))
# gerando o gráfico
plot(sun2)
# Gerando o histograma
hist(sun2)
# Gerando Boxplot destes dados
boxplot(sun2)
# Fazendo uma agregação dos dados
plot(aggregate(AirPassengers, FUN = mean))
# Quanto maior, mais explicativo ele é
# O restante da variabilidade está me variáveis não incluídas no modelo
# Varia entre zero até 1 (sempre positivo)
# Calcula-se com o quadrado do coeficiente de correlação (R)
a explicar o modelo)
# Podemos usar a própria vaiável e mais uma variável explanatória (independente)
autoplot(presidents)
prev = auto.arima(presidents)
library(forecast)
libary(ggplot2)
autoplot(presidents)
prev = auto.arima(presidents)
print(prev$residuals)
# gerando a visualização
autoplot(prev$residuals)
library(forecast)
libary(ggplot2)
autoplot(presidents)
prev = auto.arima(presidents)
print(prev$residuals)
# gerando a visualização
autoplot(prev$residuals)
hist(prev$residuals)
var(prev$residuals)
var(prev$residuals, na.rm = T)
mean(as.vector(prev$residuals), na.rm=T)
acf(prev$residuals, na.action = na.pass)
checkresiduals(prev)
print(x)
x = Box.test(airmiles, type="Ljung-Box")
print(x)
z = diff(airmiles)
x = Box.test(z, type="Ljung-Box")
print(x)
split.screen(figs=c(2,1))
split.screen(figs=c(2,1))
screen(1)
plot(airmiles, main="Airmiles")
screen(2)
plot(z, main="Serie Diferenciada")
ndiffs(airmiles,test="pp")
ndiffs(z,test="pp")
libary(forecast)
libary(ggplot2)
t1 = BoxCox(AirPassengers, lambda = 0)
autoplot(t1)
t2 = BoxCox(AirPassengers, lambda = 0.1)
autoplot(t2)
lbd = BoxCox.lambda(AirPassengers)
print(lbd)
t3 = BoxCox(AirPassengers, lambda = lbd)
autoplot(t3)
t4 = diff(AirPassengers)
autoplot(t4)
t5 = log10(AirPassengers)
autoplot(t5)
split.screen(figs = c(2,2))
screen(1)
plot(t1)
screen(2)
plot(t2)
screen(t3)
plot(t3)
screen(4)
plot(t5)
close.screen(all=T)
t1 = BoxCox(AirPassengers, lambda = 0)
autoplot(t1)
libary(forecast)
libary(ggplot2)
libary(forecast)
libary(ggplot2)
library(forecast)
library(ggplot2)
t1 = BoxCox(AirPassengers, lambda = 0)
autoplot(t1)
t2 = BoxCox(AirPassengers, lambda = 0.1)
autoplot(t2)
lbd = BoxCox.lambda(AirPassengers)
print(lbd)
t3 = BoxCox(AirPassengers, lambda = lbd)
autoplot(t3)
t4 = diff(AirPassengers)
autoplot(t4)
t5 = log10(AirPa
split.screen(figs = c(2,2))
screen(1)
plot(t1)
screen(2)
plot(t2)
screen(t3)
plot(t3)
screen(4)
plot(t5)
close.screen(all=T)
split.screen(figs = c(2,2))
screen(1)
plot(t1)
screen(2)
plot(t2)
screen(t3)
plot(t3)
screen(4)
plot(t5)
close.screen(all=T)
library(forecast)
library(ggplot2)
autoplot(fdeaths)
fdeaths2 = ma(fdeaths, order=5)
autoplot(fdeaths2)
fdeaths3 = ma(fdeaths, order=12)
autoplot(fdeaths3)
fdeaths4 = tsclean(fdeaths)
autoplot(fdeaths4)
plot(fdeaths)
lines(fdeaths2, col="red")
lines(fdeaths3, col="blue")
lines(fdeaths4, col="green")
legend("topright",legend = c("Orig.","Ma5","Ma12","Tsc"), col = c("black","red","blue","green"), lty = 1:2, cex = 0.8)
# GGPLOT2
install.packages("ggplot2")
# SF
install.packages("sf")
# GEOBR
install.packages("geobr")
# RGDAL
install.packages("rgdal")
# RASTER
install.packages("raster")
# FIELDS
install.packages("fields")
# GGPSPATIAL
install.packages("ggpspatial")
# carregando o pacote
library(ggplot2)
# Construindo um gráfico de dispersão
# AES => define qual a coluna do eixo X e qual a coluna do eixo Y
ggplot(cars, aes(x=speed,y=dist))
# Construindo um gráfico de dispersão
# AES => define qual a coluna do eixo X e qual a coluna do eixo Y
ggplot(cars, aes(x=speed,y=dist))+geom_point()
# Construindo um gráfico de dispersão
# AES => define qual a coluna do eixo X e qual a coluna do eixo Y
ggplot(cars, aes(x=speed,y=dist))+geom_point(col='red')
# CARREGANDO OS PACOTES
library(ggplot2)
library(geobr)
library(raster)
library(fields)
library(ggspatial)
library(ggplot2)
library(geobr)
library(raster)
library(fields)
library(ggspatial)
install.packages("ggspatial")
install.packages("ggspatial")
library(ggspatial)
# DEFININDO O LOCAL DE TRABALHO
setwd('D:/Projetos/Projeto_Cientista_de_Dados/Intensivao_Analise_de_Dados_com_R')
# LENDO O ARQUIVO
read.csv('Arquivos/dados/dados_temperatura.csv')
# ATRIBUINDO OS DADOS A UMA VARIAVEL
dados.temp <- read.csv('Arquivos/dados/dados_temperatura.csv')
brasil <- read_state(code_state='all')
muni <- read_municipality( code_muni = 3550308, year=2020 )
install.packages("geobr")
library(geobr)
muni <- read_municipality( code_muni = 3550308, year=2020 )
View(muni)
View(muni)
View(muni)
View(muni[[8]][[563]])
View(dados.temp)
View(muni)
View(dados.temp)
View(muni)
View(muni)
View(muni)
View(muni)
write.csv(tabela, "sao-paulo.csv", row.names = FALSE)
write.csv(muni, "sao-paulo.csv", row.names = FALSE)
sp <- read_state( code_state = 'SP', year=2020 )
write.csv(sp, "sao-paulo2.csv", row.names = FALSE)
